// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.28.0
// source: tasks.sql

package db

import (
	"context"
)

const addTask = `-- name: AddTask :exec
INSERT INTO tasks (url, status_id)
VALUES (?, ?)
`

type AddTaskParams struct {
	Url      string `json:"url"`
	StatusID int64  `json:"status_id"`
}

func (q *Queries) AddTask(ctx context.Context, arg AddTaskParams) error {
	_, err := q.db.ExecContext(ctx, addTask, arg.Url, arg.StatusID)
	return err
}

const failTask = `-- name: FailTask :exec
UPDATE tasks
SET status_id = ?, retries = retries + 1
WHERE id = ?
`

type FailTaskParams struct {
	StatusID int64 `json:"status_id"`
	ID       int64 `json:"id"`
}

func (q *Queries) FailTask(ctx context.Context, arg FailTaskParams) error {
	_, err := q.db.ExecContext(ctx, failTask, arg.StatusID, arg.ID)
	return err
}

const getStatusIDByName = `-- name: GetStatusIDByName :one
SELECT id FROM task_status WHERE name = ?
`

func (q *Queries) GetStatusIDByName(ctx context.Context, name string) (int64, error) {
	row := q.db.QueryRowContext(ctx, getStatusIDByName, name)
	var id int64
	err := row.Scan(&id)
	return id, err
}

const getTaskForProcessing = `-- name: GetTaskForProcessing :one
UPDATE tasks
SET status_id = ?
WHERE id IN (
    SELECT id
    FROM tasks AS t
    WHERE t.status_id = ?
    ORDER BY t.created_at
    LIMIT 1
)
RETURNING id, url, status_id, retries, created_at
`

type GetTaskForProcessingParams struct {
	StatusID   int64 `json:"status_id"`
	StatusID_2 int64 `json:"status_id_2"`
}

func (q *Queries) GetTaskForProcessing(ctx context.Context, arg GetTaskForProcessingParams) (Task, error) {
	row := q.db.QueryRowContext(ctx, getTaskForProcessing, arg.StatusID, arg.StatusID_2)
	var i Task
	err := row.Scan(
		&i.ID,
		&i.Url,
		&i.StatusID,
		&i.Retries,
		&i.CreatedAt,
	)
	return i, err
}

const getTaskStatus = `-- name: GetTaskStatus :many
SELECT id, name
FROM task_status
`

func (q *Queries) GetTaskStatus(ctx context.Context) ([]TaskStatus, error) {
	rows, err := q.db.QueryContext(ctx, getTaskStatus)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []TaskStatus
	for rows.Next() {
		var i TaskStatus
		if err := rows.Scan(&i.ID, &i.Name); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const listPendingOrFailedTasks = `-- name: ListPendingOrFailedTasks :many
SELECT id, url, status_id, retries, created_at
FROM tasks
WHERE status_id IN (
    SELECT id FROM task_status WHERE name IN ('PENDING', 'FAILED')
)
AND retries <= 3
ORDER BY created_at
`

func (q *Queries) ListPendingOrFailedTasks(ctx context.Context) ([]Task, error) {
	rows, err := q.db.QueryContext(ctx, listPendingOrFailedTasks)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Task
	for rows.Next() {
		var i Task
		if err := rows.Scan(
			&i.ID,
			&i.Url,
			&i.StatusID,
			&i.Retries,
			&i.CreatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const listTasksByStatusID = `-- name: ListTasksByStatusID :many
SELECT id, url, status_id, retries, created_at FROM tasks WHERE status_id = ?
`

func (q *Queries) ListTasksByStatusID(ctx context.Context, statusID int64) ([]Task, error) {
	rows, err := q.db.QueryContext(ctx, listTasksByStatusID, statusID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Task
	for rows.Next() {
		var i Task
		if err := rows.Scan(
			&i.ID,
			&i.Url,
			&i.StatusID,
			&i.Retries,
			&i.CreatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateTaskStatus = `-- name: UpdateTaskStatus :exec
UPDATE tasks
SET status_id = ?
WHERE id = ?
`

type UpdateTaskStatusParams struct {
	StatusID int64 `json:"status_id"`
	ID       int64 `json:"id"`
}

func (q *Queries) UpdateTaskStatus(ctx context.Context, arg UpdateTaskStatusParams) error {
	_, err := q.db.ExecContext(ctx, updateTaskStatus, arg.StatusID, arg.ID)
	return err
}
