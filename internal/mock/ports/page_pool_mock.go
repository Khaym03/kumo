// Code generated by mockery; DO NOT EDIT.
// github.com/vektra/mockery
// template: testify

package ports

import (
	"github.com/go-rod/rod"
	mock "github.com/stretchr/testify/mock"
)

// NewMockPagePool creates a new instance of MockPagePool. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockPagePool(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockPagePool {
	mock := &MockPagePool{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

// MockPagePool is an autogenerated mock type for the PagePool type
type MockPagePool struct {
	mock.Mock
}

type MockPagePool_Expecter struct {
	mock *mock.Mock
}

func (_m *MockPagePool) EXPECT() *MockPagePool_Expecter {
	return &MockPagePool_Expecter{mock: &_m.Mock}
}

// Get provides a mock function for the type MockPagePool
func (_mock *MockPagePool) Get() (*rod.Page, error) {
	ret := _mock.Called()

	if len(ret) == 0 {
		panic("no return value specified for Get")
	}

	var r0 *rod.Page
	var r1 error
	if returnFunc, ok := ret.Get(0).(func() (*rod.Page, error)); ok {
		return returnFunc()
	}
	if returnFunc, ok := ret.Get(0).(func() *rod.Page); ok {
		r0 = returnFunc()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*rod.Page)
		}
	}
	if returnFunc, ok := ret.Get(1).(func() error); ok {
		r1 = returnFunc()
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockPagePool_Get_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Get'
type MockPagePool_Get_Call struct {
	*mock.Call
}

// Get is a helper method to define mock.On call
func (_e *MockPagePool_Expecter) Get() *MockPagePool_Get_Call {
	return &MockPagePool_Get_Call{Call: _e.mock.On("Get")}
}

func (_c *MockPagePool_Get_Call) Run(run func()) *MockPagePool_Get_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockPagePool_Get_Call) Return(page *rod.Page, err error) *MockPagePool_Get_Call {
	_c.Call.Return(page, err)
	return _c
}

func (_c *MockPagePool_Get_Call) RunAndReturn(run func() (*rod.Page, error)) *MockPagePool_Get_Call {
	_c.Call.Return(run)
	return _c
}

// Put provides a mock function for the type MockPagePool
func (_mock *MockPagePool) Put(page *rod.Page) {
	_mock.Called(page)
	return
}

// MockPagePool_Put_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Put'
type MockPagePool_Put_Call struct {
	*mock.Call
}

// Put is a helper method to define mock.On call
//   - page *rod.Page
func (_e *MockPagePool_Expecter) Put(page interface{}) *MockPagePool_Put_Call {
	return &MockPagePool_Put_Call{Call: _e.mock.On("Put", page)}
}

func (_c *MockPagePool_Put_Call) Run(run func(page *rod.Page)) *MockPagePool_Put_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 *rod.Page
		if args[0] != nil {
			arg0 = args[0].(*rod.Page)
		}
		run(
			arg0,
		)
	})
	return _c
}

func (_c *MockPagePool_Put_Call) Return() *MockPagePool_Put_Call {
	_c.Call.Return()
	return _c
}

func (_c *MockPagePool_Put_Call) RunAndReturn(run func(page *rod.Page)) *MockPagePool_Put_Call {
	_c.Run(run)
	return _c
}

// Size provides a mock function for the type MockPagePool
func (_mock *MockPagePool) Size() int {
	ret := _mock.Called()

	if len(ret) == 0 {
		panic("no return value specified for Size")
	}

	var r0 int
	if returnFunc, ok := ret.Get(0).(func() int); ok {
		r0 = returnFunc()
	} else {
		r0 = ret.Get(0).(int)
	}
	return r0
}

// MockPagePool_Size_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Size'
type MockPagePool_Size_Call struct {
	*mock.Call
}

// Size is a helper method to define mock.On call
func (_e *MockPagePool_Expecter) Size() *MockPagePool_Size_Call {
	return &MockPagePool_Size_Call{Call: _e.mock.On("Size")}
}

func (_c *MockPagePool_Size_Call) Run(run func()) *MockPagePool_Size_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockPagePool_Size_Call) Return(n int) *MockPagePool_Size_Call {
	_c.Call.Return(n)
	return _c
}

func (_c *MockPagePool_Size_Call) RunAndReturn(run func() int) *MockPagePool_Size_Call {
	_c.Call.Return(run)
	return _c
}
