// Code generated by mockery v2.53.5. DO NOT EDIT.

package mocks

import mock "github.com/stretchr/testify/mock"

// MockWorkFlow is an autogenerated mock type for the WorkFlow type
type MockWorkFlow struct {
	mock.Mock
}

type MockWorkFlow_Expecter struct {
	mock *mock.Mock
}

func (_m *MockWorkFlow) EXPECT() *MockWorkFlow_Expecter {
	return &MockWorkFlow_Expecter{mock: &_m.Mock}
}

// Load provides a mock function with no fields
func (_m *MockWorkFlow) Load() ([]map[string]interface{}, error) {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for Load")
	}

	var r0 []map[string]interface{}
	var r1 error
	if rf, ok := ret.Get(0).(func() ([]map[string]interface{}, error)); ok {
		return rf()
	}
	if rf, ok := ret.Get(0).(func() []map[string]interface{}); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]map[string]interface{})
		}
	}

	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockWorkFlow_Load_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Load'
type MockWorkFlow_Load_Call struct {
	*mock.Call
}

// Load is a helper method to define mock.On call
func (_e *MockWorkFlow_Expecter) Load() *MockWorkFlow_Load_Call {
	return &MockWorkFlow_Load_Call{Call: _e.mock.On("Load")}
}

func (_c *MockWorkFlow_Load_Call) Run(run func()) *MockWorkFlow_Load_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockWorkFlow_Load_Call) Return(_a0 []map[string]interface{}, _a1 error) *MockWorkFlow_Load_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockWorkFlow_Load_Call) RunAndReturn(run func() ([]map[string]interface{}, error)) *MockWorkFlow_Load_Call {
	_c.Call.Return(run)
	return _c
}

// Save provides a mock function with given fields: k, v
func (_m *MockWorkFlow) Save(k string, v map[string]interface{}) error {
	ret := _m.Called(k, v)

	if len(ret) == 0 {
		panic("no return value specified for Save")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(string, map[string]interface{}) error); ok {
		r0 = rf(k, v)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockWorkFlow_Save_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Save'
type MockWorkFlow_Save_Call struct {
	*mock.Call
}

// Save is a helper method to define mock.On call
//   - k string
//   - v map[string]interface{}
func (_e *MockWorkFlow_Expecter) Save(k interface{}, v interface{}) *MockWorkFlow_Save_Call {
	return &MockWorkFlow_Save_Call{Call: _e.mock.On("Save", k, v)}
}

func (_c *MockWorkFlow_Save_Call) Run(run func(k string, v map[string]interface{})) *MockWorkFlow_Save_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string), args[1].(map[string]interface{}))
	})
	return _c
}

func (_c *MockWorkFlow_Save_Call) Return(_a0 error) *MockWorkFlow_Save_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockWorkFlow_Save_Call) RunAndReturn(run func(string, map[string]interface{}) error) *MockWorkFlow_Save_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockWorkFlow creates a new instance of MockWorkFlow. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockWorkFlow(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockWorkFlow {
	mock := &MockWorkFlow{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
