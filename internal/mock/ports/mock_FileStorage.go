// Code generated by mockery v2.53.5. DO NOT EDIT.

package mocks

import mock "github.com/stretchr/testify/mock"

// MockFileStorage is an autogenerated mock type for the FileStorage type
type MockFileStorage struct {
	mock.Mock
}

type MockFileStorage_Expecter struct {
	mock *mock.Mock
}

func (_m *MockFileStorage) EXPECT() *MockFileStorage_Expecter {
	return &MockFileStorage_Expecter{mock: &_m.Mock}
}

// GetHTML provides a mock function with given fields: key
func (_m *MockFileStorage) GetHTML(key string) ([]byte, error) {
	ret := _m.Called(key)

	if len(ret) == 0 {
		panic("no return value specified for GetHTML")
	}

	var r0 []byte
	var r1 error
	if rf, ok := ret.Get(0).(func(string) ([]byte, error)); ok {
		return rf(key)
	}
	if rf, ok := ret.Get(0).(func(string) []byte); ok {
		r0 = rf(key)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]byte)
		}
	}

	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(key)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockFileStorage_GetHTML_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetHTML'
type MockFileStorage_GetHTML_Call struct {
	*mock.Call
}

// GetHTML is a helper method to define mock.On call
//   - key string
func (_e *MockFileStorage_Expecter) GetHTML(key interface{}) *MockFileStorage_GetHTML_Call {
	return &MockFileStorage_GetHTML_Call{Call: _e.mock.On("GetHTML", key)}
}

func (_c *MockFileStorage_GetHTML_Call) Run(run func(key string)) *MockFileStorage_GetHTML_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string))
	})
	return _c
}

func (_c *MockFileStorage_GetHTML_Call) Return(_a0 []byte, _a1 error) *MockFileStorage_GetHTML_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockFileStorage_GetHTML_Call) RunAndReturn(run func(string) ([]byte, error)) *MockFileStorage_GetHTML_Call {
	_c.Call.Return(run)
	return _c
}

// GetJSON provides a mock function with given fields: key
func (_m *MockFileStorage) GetJSON(key string) ([]byte, error) {
	ret := _m.Called(key)

	if len(ret) == 0 {
		panic("no return value specified for GetJSON")
	}

	var r0 []byte
	var r1 error
	if rf, ok := ret.Get(0).(func(string) ([]byte, error)); ok {
		return rf(key)
	}
	if rf, ok := ret.Get(0).(func(string) []byte); ok {
		r0 = rf(key)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]byte)
		}
	}

	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(key)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockFileStorage_GetJSON_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetJSON'
type MockFileStorage_GetJSON_Call struct {
	*mock.Call
}

// GetJSON is a helper method to define mock.On call
//   - key string
func (_e *MockFileStorage_Expecter) GetJSON(key interface{}) *MockFileStorage_GetJSON_Call {
	return &MockFileStorage_GetJSON_Call{Call: _e.mock.On("GetJSON", key)}
}

func (_c *MockFileStorage_GetJSON_Call) Run(run func(key string)) *MockFileStorage_GetJSON_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string))
	})
	return _c
}

func (_c *MockFileStorage_GetJSON_Call) Return(_a0 []byte, _a1 error) *MockFileStorage_GetJSON_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockFileStorage_GetJSON_Call) RunAndReturn(run func(string) ([]byte, error)) *MockFileStorage_GetJSON_Call {
	_c.Call.Return(run)
	return _c
}

// GetPDF provides a mock function with given fields: key
func (_m *MockFileStorage) GetPDF(key string) ([]byte, error) {
	ret := _m.Called(key)

	if len(ret) == 0 {
		panic("no return value specified for GetPDF")
	}

	var r0 []byte
	var r1 error
	if rf, ok := ret.Get(0).(func(string) ([]byte, error)); ok {
		return rf(key)
	}
	if rf, ok := ret.Get(0).(func(string) []byte); ok {
		r0 = rf(key)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]byte)
		}
	}

	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(key)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockFileStorage_GetPDF_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetPDF'
type MockFileStorage_GetPDF_Call struct {
	*mock.Call
}

// GetPDF is a helper method to define mock.On call
//   - key string
func (_e *MockFileStorage_Expecter) GetPDF(key interface{}) *MockFileStorage_GetPDF_Call {
	return &MockFileStorage_GetPDF_Call{Call: _e.mock.On("GetPDF", key)}
}

func (_c *MockFileStorage_GetPDF_Call) Run(run func(key string)) *MockFileStorage_GetPDF_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string))
	})
	return _c
}

func (_c *MockFileStorage_GetPDF_Call) Return(_a0 []byte, _a1 error) *MockFileStorage_GetPDF_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockFileStorage_GetPDF_Call) RunAndReturn(run func(string) ([]byte, error)) *MockFileStorage_GetPDF_Call {
	_c.Call.Return(run)
	return _c
}

// SaveHTML provides a mock function with given fields: key, data
func (_m *MockFileStorage) SaveHTML(key string, data []byte) error {
	ret := _m.Called(key, data)

	if len(ret) == 0 {
		panic("no return value specified for SaveHTML")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(string, []byte) error); ok {
		r0 = rf(key, data)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockFileStorage_SaveHTML_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'SaveHTML'
type MockFileStorage_SaveHTML_Call struct {
	*mock.Call
}

// SaveHTML is a helper method to define mock.On call
//   - key string
//   - data []byte
func (_e *MockFileStorage_Expecter) SaveHTML(key interface{}, data interface{}) *MockFileStorage_SaveHTML_Call {
	return &MockFileStorage_SaveHTML_Call{Call: _e.mock.On("SaveHTML", key, data)}
}

func (_c *MockFileStorage_SaveHTML_Call) Run(run func(key string, data []byte)) *MockFileStorage_SaveHTML_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string), args[1].([]byte))
	})
	return _c
}

func (_c *MockFileStorage_SaveHTML_Call) Return(_a0 error) *MockFileStorage_SaveHTML_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockFileStorage_SaveHTML_Call) RunAndReturn(run func(string, []byte) error) *MockFileStorage_SaveHTML_Call {
	_c.Call.Return(run)
	return _c
}

// SaveJSON provides a mock function with given fields: id, data
func (_m *MockFileStorage) SaveJSON(id string, data []byte) error {
	ret := _m.Called(id, data)

	if len(ret) == 0 {
		panic("no return value specified for SaveJSON")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(string, []byte) error); ok {
		r0 = rf(id, data)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockFileStorage_SaveJSON_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'SaveJSON'
type MockFileStorage_SaveJSON_Call struct {
	*mock.Call
}

// SaveJSON is a helper method to define mock.On call
//   - id string
//   - data []byte
func (_e *MockFileStorage_Expecter) SaveJSON(id interface{}, data interface{}) *MockFileStorage_SaveJSON_Call {
	return &MockFileStorage_SaveJSON_Call{Call: _e.mock.On("SaveJSON", id, data)}
}

func (_c *MockFileStorage_SaveJSON_Call) Run(run func(id string, data []byte)) *MockFileStorage_SaveJSON_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string), args[1].([]byte))
	})
	return _c
}

func (_c *MockFileStorage_SaveJSON_Call) Return(_a0 error) *MockFileStorage_SaveJSON_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockFileStorage_SaveJSON_Call) RunAndReturn(run func(string, []byte) error) *MockFileStorage_SaveJSON_Call {
	_c.Call.Return(run)
	return _c
}

// SavePDF provides a mock function with given fields: key, data
func (_m *MockFileStorage) SavePDF(key string, data []byte) error {
	ret := _m.Called(key, data)

	if len(ret) == 0 {
		panic("no return value specified for SavePDF")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(string, []byte) error); ok {
		r0 = rf(key, data)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockFileStorage_SavePDF_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'SavePDF'
type MockFileStorage_SavePDF_Call struct {
	*mock.Call
}

// SavePDF is a helper method to define mock.On call
//   - key string
//   - data []byte
func (_e *MockFileStorage_Expecter) SavePDF(key interface{}, data interface{}) *MockFileStorage_SavePDF_Call {
	return &MockFileStorage_SavePDF_Call{Call: _e.mock.On("SavePDF", key, data)}
}

func (_c *MockFileStorage_SavePDF_Call) Run(run func(key string, data []byte)) *MockFileStorage_SavePDF_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string), args[1].([]byte))
	})
	return _c
}

func (_c *MockFileStorage_SavePDF_Call) Return(_a0 error) *MockFileStorage_SavePDF_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockFileStorage_SavePDF_Call) RunAndReturn(run func(string, []byte) error) *MockFileStorage_SavePDF_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockFileStorage creates a new instance of MockFileStorage. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockFileStorage(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockFileStorage {
	mock := &MockFileStorage{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
