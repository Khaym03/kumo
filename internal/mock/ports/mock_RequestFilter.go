// Code generated by mockery v2.53.5. DO NOT EDIT.

package mocks

import (
	mock "github.com/stretchr/testify/mock"

	types "github.com/Khaym03/kumo/internal/pkg/types"
)

// MockRequestFilter is an autogenerated mock type for the RequestFilter type
type MockRequestFilter struct {
	mock.Mock
}

type MockRequestFilter_Expecter struct {
	mock *mock.Mock
}

func (_m *MockRequestFilter) EXPECT() *MockRequestFilter_Expecter {
	return &MockRequestFilter_Expecter{mock: &_m.Mock}
}

// Filter provides a mock function with given fields: req
func (_m *MockRequestFilter) Filter(req *types.Request) (bool, error) {
	ret := _m.Called(req)

	if len(ret) == 0 {
		panic("no return value specified for Filter")
	}

	var r0 bool
	var r1 error
	if rf, ok := ret.Get(0).(func(*types.Request) (bool, error)); ok {
		return rf(req)
	}
	if rf, ok := ret.Get(0).(func(*types.Request) bool); ok {
		r0 = rf(req)
	} else {
		r0 = ret.Get(0).(bool)
	}

	if rf, ok := ret.Get(1).(func(*types.Request) error); ok {
		r1 = rf(req)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockRequestFilter_Filter_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Filter'
type MockRequestFilter_Filter_Call struct {
	*mock.Call
}

// Filter is a helper method to define mock.On call
//   - req *types.Request
func (_e *MockRequestFilter_Expecter) Filter(req interface{}) *MockRequestFilter_Filter_Call {
	return &MockRequestFilter_Filter_Call{Call: _e.mock.On("Filter", req)}
}

func (_c *MockRequestFilter_Filter_Call) Run(run func(req *types.Request)) *MockRequestFilter_Filter_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*types.Request))
	})
	return _c
}

func (_c *MockRequestFilter_Filter_Call) Return(_a0 bool, _a1 error) *MockRequestFilter_Filter_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockRequestFilter_Filter_Call) RunAndReturn(run func(*types.Request) (bool, error)) *MockRequestFilter_Filter_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockRequestFilter creates a new instance of MockRequestFilter. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockRequestFilter(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockRequestFilter {
	mock := &MockRequestFilter{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
