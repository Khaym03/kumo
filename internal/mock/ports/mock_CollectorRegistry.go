// Code generated by mockery v2.53.5. DO NOT EDIT.

package mocks

import (
	ports "github.com/Khaym03/kumo/internal/ports"
	mock "github.com/stretchr/testify/mock"
)

// MockCollectorRegistry is an autogenerated mock type for the CollectorRegistry type
type MockCollectorRegistry struct {
	mock.Mock
}

type MockCollectorRegistry_Expecter struct {
	mock *mock.Mock
}

func (_m *MockCollectorRegistry) EXPECT() *MockCollectorRegistry_Expecter {
	return &MockCollectorRegistry_Expecter{mock: &_m.Mock}
}

// Collectors provides a mock function with no fields
func (_m *MockCollectorRegistry) Collectors() []ports.Collector {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for Collectors")
	}

	var r0 []ports.Collector
	if rf, ok := ret.Get(0).(func() []ports.Collector); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]ports.Collector)
		}
	}

	return r0
}

// MockCollectorRegistry_Collectors_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Collectors'
type MockCollectorRegistry_Collectors_Call struct {
	*mock.Call
}

// Collectors is a helper method to define mock.On call
func (_e *MockCollectorRegistry_Expecter) Collectors() *MockCollectorRegistry_Collectors_Call {
	return &MockCollectorRegistry_Collectors_Call{Call: _e.mock.On("Collectors")}
}

func (_c *MockCollectorRegistry_Collectors_Call) Run(run func()) *MockCollectorRegistry_Collectors_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockCollectorRegistry_Collectors_Call) Return(_a0 []ports.Collector) *MockCollectorRegistry_Collectors_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockCollectorRegistry_Collectors_Call) RunAndReturn(run func() []ports.Collector) *MockCollectorRegistry_Collectors_Call {
	_c.Call.Return(run)
	return _c
}

// RegisterCollector provides a mock function with given fields: _a0
func (_m *MockCollectorRegistry) RegisterCollector(_a0 ports.Collector) {
	_m.Called(_a0)
}

// MockCollectorRegistry_RegisterCollector_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'RegisterCollector'
type MockCollectorRegistry_RegisterCollector_Call struct {
	*mock.Call
}

// RegisterCollector is a helper method to define mock.On call
//   - _a0 ports.Collector
func (_e *MockCollectorRegistry_Expecter) RegisterCollector(_a0 interface{}) *MockCollectorRegistry_RegisterCollector_Call {
	return &MockCollectorRegistry_RegisterCollector_Call{Call: _e.mock.On("RegisterCollector", _a0)}
}

func (_c *MockCollectorRegistry_RegisterCollector_Call) Run(run func(_a0 ports.Collector)) *MockCollectorRegistry_RegisterCollector_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(ports.Collector))
	})
	return _c
}

func (_c *MockCollectorRegistry_RegisterCollector_Call) Return() *MockCollectorRegistry_RegisterCollector_Call {
	_c.Call.Return()
	return _c
}

func (_c *MockCollectorRegistry_RegisterCollector_Call) RunAndReturn(run func(ports.Collector)) *MockCollectorRegistry_RegisterCollector_Call {
	_c.Run(run)
	return _c
}

// NewMockCollectorRegistry creates a new instance of MockCollectorRegistry. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockCollectorRegistry(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockCollectorRegistry {
	mock := &MockCollectorRegistry{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
