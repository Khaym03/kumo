// Code generated by mockery; DO NOT EDIT.
// github.com/vektra/mockery
// template: testify

package ports

import (
	"context"

	"github.com/Khaym03/kumo/internal/pkg/types"
	"github.com/Khaym03/kumo/internal/ports"
	"github.com/go-rod/rod"
	mock "github.com/stretchr/testify/mock"
)

// NewMockCollector creates a new instance of MockCollector. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockCollector(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockCollector {
	mock := &MockCollector{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

// MockCollector is an autogenerated mock type for the Collector type
type MockCollector struct {
	mock.Mock
}

type MockCollector_Expecter struct {
	mock *mock.Mock
}

func (_m *MockCollector) EXPECT() *MockCollector_Expecter {
	return &MockCollector_Expecter{mock: &_m.Mock}
}

// ProcessPage provides a mock function for the type MockCollector
func (_mock *MockCollector) ProcessPage(ctx context.Context, page *rod.Page, req *types.Request, queue ports.Enqueuer, fs ports.FileStorage) error {
	ret := _mock.Called(ctx, page, req, queue, fs)

	if len(ret) == 0 {
		panic("no return value specified for ProcessPage")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, *rod.Page, *types.Request, ports.Enqueuer, ports.FileStorage) error); ok {
		r0 = returnFunc(ctx, page, req, queue, fs)
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// MockCollector_ProcessPage_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ProcessPage'
type MockCollector_ProcessPage_Call struct {
	*mock.Call
}

// ProcessPage is a helper method to define mock.On call
//   - ctx context.Context
//   - page *rod.Page
//   - req *types.Request
//   - queue ports.Enqueuer
//   - fs ports.FileStorage
func (_e *MockCollector_Expecter) ProcessPage(ctx interface{}, page interface{}, req interface{}, queue interface{}, fs interface{}) *MockCollector_ProcessPage_Call {
	return &MockCollector_ProcessPage_Call{Call: _e.mock.On("ProcessPage", ctx, page, req, queue, fs)}
}

func (_c *MockCollector_ProcessPage_Call) Run(run func(ctx context.Context, page *rod.Page, req *types.Request, queue ports.Enqueuer, fs ports.FileStorage)) *MockCollector_ProcessPage_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 *rod.Page
		if args[1] != nil {
			arg1 = args[1].(*rod.Page)
		}
		var arg2 *types.Request
		if args[2] != nil {
			arg2 = args[2].(*types.Request)
		}
		var arg3 ports.Enqueuer
		if args[3] != nil {
			arg3 = args[3].(ports.Enqueuer)
		}
		var arg4 ports.FileStorage
		if args[4] != nil {
			arg4 = args[4].(ports.FileStorage)
		}
		run(
			arg0,
			arg1,
			arg2,
			arg3,
			arg4,
		)
	})
	return _c
}

func (_c *MockCollector_ProcessPage_Call) Return(err error) *MockCollector_ProcessPage_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *MockCollector_ProcessPage_Call) RunAndReturn(run func(ctx context.Context, page *rod.Page, req *types.Request, queue ports.Enqueuer, fs ports.FileStorage) error) *MockCollector_ProcessPage_Call {
	_c.Call.Return(run)
	return _c
}

// String provides a mock function for the type MockCollector
func (_mock *MockCollector) String() string {
	ret := _mock.Called()

	if len(ret) == 0 {
		panic("no return value specified for String")
	}

	var r0 string
	if returnFunc, ok := ret.Get(0).(func() string); ok {
		r0 = returnFunc()
	} else {
		r0 = ret.Get(0).(string)
	}
	return r0
}

// MockCollector_String_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'String'
type MockCollector_String_Call struct {
	*mock.Call
}

// String is a helper method to define mock.On call
func (_e *MockCollector_Expecter) String() *MockCollector_String_Call {
	return &MockCollector_String_Call{Call: _e.mock.On("String")}
}

func (_c *MockCollector_String_Call) Run(run func()) *MockCollector_String_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockCollector_String_Call) Return(s string) *MockCollector_String_Call {
	_c.Call.Return(s)
	return _c
}

func (_c *MockCollector_String_Call) RunAndReturn(run func() string) *MockCollector_String_Call {
	_c.Call.Return(run)
	return _c
}
