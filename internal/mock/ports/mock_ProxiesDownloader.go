// Code generated by mockery v2.53.5. DO NOT EDIT.

package mocks

import (
	mock "github.com/stretchr/testify/mock"

	proxy "github.com/Khaym03/kumo/internal/pkg/proxy"
)

// MockProxiesDownloader is an autogenerated mock type for the ProxiesDownloader type
type MockProxiesDownloader struct {
	mock.Mock
}

type MockProxiesDownloader_Expecter struct {
	mock *mock.Mock
}

func (_m *MockProxiesDownloader) EXPECT() *MockProxiesDownloader_Expecter {
	return &MockProxiesDownloader_Expecter{mock: &_m.Mock}
}

// Download provides a mock function with no fields
func (_m *MockProxiesDownloader) Download() ([]proxy.Proxy, error) {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for Download")
	}

	var r0 []proxy.Proxy
	var r1 error
	if rf, ok := ret.Get(0).(func() ([]proxy.Proxy, error)); ok {
		return rf()
	}
	if rf, ok := ret.Get(0).(func() []proxy.Proxy); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]proxy.Proxy)
		}
	}

	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockProxiesDownloader_Download_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Download'
type MockProxiesDownloader_Download_Call struct {
	*mock.Call
}

// Download is a helper method to define mock.On call
func (_e *MockProxiesDownloader_Expecter) Download() *MockProxiesDownloader_Download_Call {
	return &MockProxiesDownloader_Download_Call{Call: _e.mock.On("Download")}
}

func (_c *MockProxiesDownloader_Download_Call) Run(run func()) *MockProxiesDownloader_Download_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockProxiesDownloader_Download_Call) Return(_a0 []proxy.Proxy, _a1 error) *MockProxiesDownloader_Download_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockProxiesDownloader_Download_Call) RunAndReturn(run func() ([]proxy.Proxy, error)) *MockProxiesDownloader_Download_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockProxiesDownloader creates a new instance of MockProxiesDownloader. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockProxiesDownloader(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockProxiesDownloader {
	mock := &MockProxiesDownloader{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
