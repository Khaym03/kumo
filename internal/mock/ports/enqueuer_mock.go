// Code generated by mockery; DO NOT EDIT.
// github.com/vektra/mockery
// template: testify

package ports

import (
	"github.com/Khaym03/kumo/internal/pkg/types"
	mock "github.com/stretchr/testify/mock"
)

// NewMockEnqueuer creates a new instance of MockEnqueuer. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockEnqueuer(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockEnqueuer {
	mock := &MockEnqueuer{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

// MockEnqueuer is an autogenerated mock type for the Enqueuer type
type MockEnqueuer struct {
	mock.Mock
}

type MockEnqueuer_Expecter struct {
	mock *mock.Mock
}

func (_m *MockEnqueuer) EXPECT() *MockEnqueuer_Expecter {
	return &MockEnqueuer_Expecter{mock: &_m.Mock}
}

// Enqueue provides a mock function for the type MockEnqueuer
func (_mock *MockEnqueuer) Enqueue(reqs ...*types.Request) {
	if len(reqs) > 0 {
		_mock.Called(reqs)
	} else {
		_mock.Called()
	}

	return
}

// MockEnqueuer_Enqueue_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Enqueue'
type MockEnqueuer_Enqueue_Call struct {
	*mock.Call
}

// Enqueue is a helper method to define mock.On call
//   - reqs ...*types.Request
func (_e *MockEnqueuer_Expecter) Enqueue(reqs ...interface{}) *MockEnqueuer_Enqueue_Call {
	return &MockEnqueuer_Enqueue_Call{Call: _e.mock.On("Enqueue",
		append([]interface{}{}, reqs...)...)}
}

func (_c *MockEnqueuer_Enqueue_Call) Run(run func(reqs ...*types.Request)) *MockEnqueuer_Enqueue_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 []*types.Request
		var variadicArgs []*types.Request
		if len(args) > 0 {
			variadicArgs = args[0].([]*types.Request)
		}
		arg0 = variadicArgs
		run(
			arg0...,
		)
	})
	return _c
}

func (_c *MockEnqueuer_Enqueue_Call) Return() *MockEnqueuer_Enqueue_Call {
	_c.Call.Return()
	return _c
}

func (_c *MockEnqueuer_Enqueue_Call) RunAndReturn(run func(reqs ...*types.Request)) *MockEnqueuer_Enqueue_Call {
	_c.Run(run)
	return _c
}
