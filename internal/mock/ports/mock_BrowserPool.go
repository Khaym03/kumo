// Code generated by mockery v2.53.5. DO NOT EDIT.

package mocks

import (
	mock "github.com/stretchr/testify/mock"

	rod "github.com/go-rod/rod"
)

// MockBrowserPool is an autogenerated mock type for the BrowserPool type
type MockBrowserPool struct {
	mock.Mock
}

type MockBrowserPool_Expecter struct {
	mock *mock.Mock
}

func (_m *MockBrowserPool) EXPECT() *MockBrowserPool_Expecter {
	return &MockBrowserPool_Expecter{mock: &_m.Mock}
}

// Close provides a mock function with no fields
func (_m *MockBrowserPool) Close() error {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for Close")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func() error); ok {
		r0 = rf()
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockBrowserPool_Close_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Close'
type MockBrowserPool_Close_Call struct {
	*mock.Call
}

// Close is a helper method to define mock.On call
func (_e *MockBrowserPool_Expecter) Close() *MockBrowserPool_Close_Call {
	return &MockBrowserPool_Close_Call{Call: _e.mock.On("Close")}
}

func (_c *MockBrowserPool_Close_Call) Run(run func()) *MockBrowserPool_Close_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockBrowserPool_Close_Call) Return(_a0 error) *MockBrowserPool_Close_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockBrowserPool_Close_Call) RunAndReturn(run func() error) *MockBrowserPool_Close_Call {
	_c.Call.Return(run)
	return _c
}

// Get provides a mock function with no fields
func (_m *MockBrowserPool) Get() (*rod.Browser, error) {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for Get")
	}

	var r0 *rod.Browser
	var r1 error
	if rf, ok := ret.Get(0).(func() (*rod.Browser, error)); ok {
		return rf()
	}
	if rf, ok := ret.Get(0).(func() *rod.Browser); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*rod.Browser)
		}
	}

	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockBrowserPool_Get_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Get'
type MockBrowserPool_Get_Call struct {
	*mock.Call
}

// Get is a helper method to define mock.On call
func (_e *MockBrowserPool_Expecter) Get() *MockBrowserPool_Get_Call {
	return &MockBrowserPool_Get_Call{Call: _e.mock.On("Get")}
}

func (_c *MockBrowserPool_Get_Call) Run(run func()) *MockBrowserPool_Get_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockBrowserPool_Get_Call) Return(_a0 *rod.Browser, _a1 error) *MockBrowserPool_Get_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockBrowserPool_Get_Call) RunAndReturn(run func() (*rod.Browser, error)) *MockBrowserPool_Get_Call {
	_c.Call.Return(run)
	return _c
}

// Put provides a mock function with given fields: _a0
func (_m *MockBrowserPool) Put(_a0 *rod.Browser) {
	_m.Called(_a0)
}

// MockBrowserPool_Put_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Put'
type MockBrowserPool_Put_Call struct {
	*mock.Call
}

// Put is a helper method to define mock.On call
//   - _a0 *rod.Browser
func (_e *MockBrowserPool_Expecter) Put(_a0 interface{}) *MockBrowserPool_Put_Call {
	return &MockBrowserPool_Put_Call{Call: _e.mock.On("Put", _a0)}
}

func (_c *MockBrowserPool_Put_Call) Run(run func(_a0 *rod.Browser)) *MockBrowserPool_Put_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*rod.Browser))
	})
	return _c
}

func (_c *MockBrowserPool_Put_Call) Return() *MockBrowserPool_Put_Call {
	_c.Call.Return()
	return _c
}

func (_c *MockBrowserPool_Put_Call) RunAndReturn(run func(*rod.Browser)) *MockBrowserPool_Put_Call {
	_c.Run(run)
	return _c
}

// Size provides a mock function with no fields
func (_m *MockBrowserPool) Size() int {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for Size")
	}

	var r0 int
	if rf, ok := ret.Get(0).(func() int); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(int)
	}

	return r0
}

// MockBrowserPool_Size_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Size'
type MockBrowserPool_Size_Call struct {
	*mock.Call
}

// Size is a helper method to define mock.On call
func (_e *MockBrowserPool_Expecter) Size() *MockBrowserPool_Size_Call {
	return &MockBrowserPool_Size_Call{Call: _e.mock.On("Size")}
}

func (_c *MockBrowserPool_Size_Call) Run(run func()) *MockBrowserPool_Size_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockBrowserPool_Size_Call) Return(_a0 int) *MockBrowserPool_Size_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockBrowserPool_Size_Call) RunAndReturn(run func() int) *MockBrowserPool_Size_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockBrowserPool creates a new instance of MockBrowserPool. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockBrowserPool(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockBrowserPool {
	mock := &MockBrowserPool{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
