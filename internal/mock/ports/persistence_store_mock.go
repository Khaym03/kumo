// Code generated by mockery; DO NOT EDIT.
// github.com/vektra/mockery
// template: testify

package ports

import (
	"github.com/Khaym03/kumo/internal/pkg/types"
	mock "github.com/stretchr/testify/mock"
)

// NewMockPersistenceStore creates a new instance of MockPersistenceStore. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockPersistenceStore(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockPersistenceStore {
	mock := &MockPersistenceStore{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

// MockPersistenceStore is an autogenerated mock type for the PersistenceStore type
type MockPersistenceStore struct {
	mock.Mock
}

type MockPersistenceStore_Expecter struct {
	mock *mock.Mock
}

func (_m *MockPersistenceStore) EXPECT() *MockPersistenceStore_Expecter {
	return &MockPersistenceStore_Expecter{mock: &_m.Mock}
}

// Close provides a mock function for the type MockPersistenceStore
func (_mock *MockPersistenceStore) Close() error {
	ret := _mock.Called()

	if len(ret) == 0 {
		panic("no return value specified for Close")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func() error); ok {
		r0 = returnFunc()
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// MockPersistenceStore_Close_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Close'
type MockPersistenceStore_Close_Call struct {
	*mock.Call
}

// Close is a helper method to define mock.On call
func (_e *MockPersistenceStore_Expecter) Close() *MockPersistenceStore_Close_Call {
	return &MockPersistenceStore_Close_Call{Call: _e.mock.On("Close")}
}

func (_c *MockPersistenceStore_Close_Call) Run(run func()) *MockPersistenceStore_Close_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockPersistenceStore_Close_Call) Return(err error) *MockPersistenceStore_Close_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *MockPersistenceStore_Close_Call) RunAndReturn(run func() error) *MockPersistenceStore_Close_Call {
	_c.Call.Return(run)
	return _c
}

// IsCompleted provides a mock function for the type MockPersistenceStore
func (_mock *MockPersistenceStore) IsCompleted(url string) (bool, error) {
	ret := _mock.Called(url)

	if len(ret) == 0 {
		panic("no return value specified for IsCompleted")
	}

	var r0 bool
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(string) (bool, error)); ok {
		return returnFunc(url)
	}
	if returnFunc, ok := ret.Get(0).(func(string) bool); ok {
		r0 = returnFunc(url)
	} else {
		r0 = ret.Get(0).(bool)
	}
	if returnFunc, ok := ret.Get(1).(func(string) error); ok {
		r1 = returnFunc(url)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockPersistenceStore_IsCompleted_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'IsCompleted'
type MockPersistenceStore_IsCompleted_Call struct {
	*mock.Call
}

// IsCompleted is a helper method to define mock.On call
//   - url string
func (_e *MockPersistenceStore_Expecter) IsCompleted(url interface{}) *MockPersistenceStore_IsCompleted_Call {
	return &MockPersistenceStore_IsCompleted_Call{Call: _e.mock.On("IsCompleted", url)}
}

func (_c *MockPersistenceStore_IsCompleted_Call) Run(run func(url string)) *MockPersistenceStore_IsCompleted_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 string
		if args[0] != nil {
			arg0 = args[0].(string)
		}
		run(
			arg0,
		)
	})
	return _c
}

func (_c *MockPersistenceStore_IsCompleted_Call) Return(b bool, err error) *MockPersistenceStore_IsCompleted_Call {
	_c.Call.Return(b, err)
	return _c
}

func (_c *MockPersistenceStore_IsCompleted_Call) RunAndReturn(run func(url string) (bool, error)) *MockPersistenceStore_IsCompleted_Call {
	_c.Call.Return(run)
	return _c
}

// LoadPending provides a mock function for the type MockPersistenceStore
func (_mock *MockPersistenceStore) LoadPending() ([]*types.Request, error) {
	ret := _mock.Called()

	if len(ret) == 0 {
		panic("no return value specified for LoadPending")
	}

	var r0 []*types.Request
	var r1 error
	if returnFunc, ok := ret.Get(0).(func() ([]*types.Request, error)); ok {
		return returnFunc()
	}
	if returnFunc, ok := ret.Get(0).(func() []*types.Request); ok {
		r0 = returnFunc()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*types.Request)
		}
	}
	if returnFunc, ok := ret.Get(1).(func() error); ok {
		r1 = returnFunc()
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockPersistenceStore_LoadPending_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'LoadPending'
type MockPersistenceStore_LoadPending_Call struct {
	*mock.Call
}

// LoadPending is a helper method to define mock.On call
func (_e *MockPersistenceStore_Expecter) LoadPending() *MockPersistenceStore_LoadPending_Call {
	return &MockPersistenceStore_LoadPending_Call{Call: _e.mock.On("LoadPending")}
}

func (_c *MockPersistenceStore_LoadPending_Call) Run(run func()) *MockPersistenceStore_LoadPending_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockPersistenceStore_LoadPending_Call) Return(requests []*types.Request, err error) *MockPersistenceStore_LoadPending_Call {
	_c.Call.Return(requests, err)
	return _c
}

func (_c *MockPersistenceStore_LoadPending_Call) RunAndReturn(run func() ([]*types.Request, error)) *MockPersistenceStore_LoadPending_Call {
	_c.Call.Return(run)
	return _c
}

// RemoveFromPending provides a mock function for the type MockPersistenceStore
func (_mock *MockPersistenceStore) RemoveFromPending(req *types.Request) error {
	ret := _mock.Called(req)

	if len(ret) == 0 {
		panic("no return value specified for RemoveFromPending")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func(*types.Request) error); ok {
		r0 = returnFunc(req)
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// MockPersistenceStore_RemoveFromPending_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'RemoveFromPending'
type MockPersistenceStore_RemoveFromPending_Call struct {
	*mock.Call
}

// RemoveFromPending is a helper method to define mock.On call
//   - req *types.Request
func (_e *MockPersistenceStore_Expecter) RemoveFromPending(req interface{}) *MockPersistenceStore_RemoveFromPending_Call {
	return &MockPersistenceStore_RemoveFromPending_Call{Call: _e.mock.On("RemoveFromPending", req)}
}

func (_c *MockPersistenceStore_RemoveFromPending_Call) Run(run func(req *types.Request)) *MockPersistenceStore_RemoveFromPending_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 *types.Request
		if args[0] != nil {
			arg0 = args[0].(*types.Request)
		}
		run(
			arg0,
		)
	})
	return _c
}

func (_c *MockPersistenceStore_RemoveFromPending_Call) Return(err error) *MockPersistenceStore_RemoveFromPending_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *MockPersistenceStore_RemoveFromPending_Call) RunAndReturn(run func(req *types.Request) error) *MockPersistenceStore_RemoveFromPending_Call {
	_c.Call.Return(run)
	return _c
}

// SaveCompleted provides a mock function for the type MockPersistenceStore
func (_mock *MockPersistenceStore) SaveCompleted(req *types.Request) error {
	ret := _mock.Called(req)

	if len(ret) == 0 {
		panic("no return value specified for SaveCompleted")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func(*types.Request) error); ok {
		r0 = returnFunc(req)
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// MockPersistenceStore_SaveCompleted_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'SaveCompleted'
type MockPersistenceStore_SaveCompleted_Call struct {
	*mock.Call
}

// SaveCompleted is a helper method to define mock.On call
//   - req *types.Request
func (_e *MockPersistenceStore_Expecter) SaveCompleted(req interface{}) *MockPersistenceStore_SaveCompleted_Call {
	return &MockPersistenceStore_SaveCompleted_Call{Call: _e.mock.On("SaveCompleted", req)}
}

func (_c *MockPersistenceStore_SaveCompleted_Call) Run(run func(req *types.Request)) *MockPersistenceStore_SaveCompleted_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 *types.Request
		if args[0] != nil {
			arg0 = args[0].(*types.Request)
		}
		run(
			arg0,
		)
	})
	return _c
}

func (_c *MockPersistenceStore_SaveCompleted_Call) Return(err error) *MockPersistenceStore_SaveCompleted_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *MockPersistenceStore_SaveCompleted_Call) RunAndReturn(run func(req *types.Request) error) *MockPersistenceStore_SaveCompleted_Call {
	_c.Call.Return(run)
	return _c
}

// SavePending provides a mock function for the type MockPersistenceStore
func (_mock *MockPersistenceStore) SavePending(requests ...*types.Request) error {
	var tmpRet mock.Arguments
	if len(requests) > 0 {
		tmpRet = _mock.Called(requests)
	} else {
		tmpRet = _mock.Called()
	}
	ret := tmpRet

	if len(ret) == 0 {
		panic("no return value specified for SavePending")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func(...*types.Request) error); ok {
		r0 = returnFunc(requests...)
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// MockPersistenceStore_SavePending_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'SavePending'
type MockPersistenceStore_SavePending_Call struct {
	*mock.Call
}

// SavePending is a helper method to define mock.On call
//   - requests ...*types.Request
func (_e *MockPersistenceStore_Expecter) SavePending(requests ...interface{}) *MockPersistenceStore_SavePending_Call {
	return &MockPersistenceStore_SavePending_Call{Call: _e.mock.On("SavePending",
		append([]interface{}{}, requests...)...)}
}

func (_c *MockPersistenceStore_SavePending_Call) Run(run func(requests ...*types.Request)) *MockPersistenceStore_SavePending_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 []*types.Request
		var variadicArgs []*types.Request
		if len(args) > 0 {
			variadicArgs = args[0].([]*types.Request)
		}
		arg0 = variadicArgs
		run(
			arg0...,
		)
	})
	return _c
}

func (_c *MockPersistenceStore_SavePending_Call) Return(err error) *MockPersistenceStore_SavePending_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *MockPersistenceStore_SavePending_Call) RunAndReturn(run func(requests ...*types.Request) error) *MockPersistenceStore_SavePending_Call {
	_c.Call.Return(run)
	return _c
}
