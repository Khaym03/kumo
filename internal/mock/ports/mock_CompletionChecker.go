// Code generated by mockery v2.53.5. DO NOT EDIT.

package mocks

import mock "github.com/stretchr/testify/mock"

// MockCompletionChecker is an autogenerated mock type for the CompletionChecker type
type MockCompletionChecker struct {
	mock.Mock
}

type MockCompletionChecker_Expecter struct {
	mock *mock.Mock
}

func (_m *MockCompletionChecker) EXPECT() *MockCompletionChecker_Expecter {
	return &MockCompletionChecker_Expecter{mock: &_m.Mock}
}

// IsCompleted provides a mock function with given fields: url
func (_m *MockCompletionChecker) IsCompleted(url string) (bool, error) {
	ret := _m.Called(url)

	if len(ret) == 0 {
		panic("no return value specified for IsCompleted")
	}

	var r0 bool
	var r1 error
	if rf, ok := ret.Get(0).(func(string) (bool, error)); ok {
		return rf(url)
	}
	if rf, ok := ret.Get(0).(func(string) bool); ok {
		r0 = rf(url)
	} else {
		r0 = ret.Get(0).(bool)
	}

	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(url)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockCompletionChecker_IsCompleted_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'IsCompleted'
type MockCompletionChecker_IsCompleted_Call struct {
	*mock.Call
}

// IsCompleted is a helper method to define mock.On call
//   - url string
func (_e *MockCompletionChecker_Expecter) IsCompleted(url interface{}) *MockCompletionChecker_IsCompleted_Call {
	return &MockCompletionChecker_IsCompleted_Call{Call: _e.mock.On("IsCompleted", url)}
}

func (_c *MockCompletionChecker_IsCompleted_Call) Run(run func(url string)) *MockCompletionChecker_IsCompleted_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string))
	})
	return _c
}

func (_c *MockCompletionChecker_IsCompleted_Call) Return(_a0 bool, _a1 error) *MockCompletionChecker_IsCompleted_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockCompletionChecker_IsCompleted_Call) RunAndReturn(run func(string) (bool, error)) *MockCompletionChecker_IsCompleted_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockCompletionChecker creates a new instance of MockCompletionChecker. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockCompletionChecker(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockCompletionChecker {
	mock := &MockCompletionChecker{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
